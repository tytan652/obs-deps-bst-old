name: Setup BuildStream
inputs:
  venv-path:
    description: Path to the Python venv folder created for BuildStream
    required: false
    default: ${{ github.workspace }}/.venv
  caches-path:
    description: Path to the cache folder that BuildStream will use to cache artifacts
    required: false
    default:  ${{ github.workspace }}/.bst/caches
  sources-path:
    description: Path to the cache folder that BuildStream will use to cache sources
    required: false
    default:  ${{ github.workspace }}/.bst/sources
  logs-path:
    description: Path to the log folder that BuildStream will use to store logs
    required: false
    default:  ${{ github.workspace }}/.bst/logs
  add-local-cache-server-config:
    description: Add 127.0.0.1:local-cache-server-port as project cache server (none, artifacts, sources, both)
    required: false
    default: 'none'
  local-cache-server-port:
    description: Port of the local cache server
    required: false
    default: 11001
  local-cache-server-push:
    description: Enable pushing to the local cache server (none, artifacts, sources, both)
    required: false
    default: 'none'
  buildstream-project-name:
    description: Name used for cache server setup
    required: false
    default: '${GITHUB_REPOSITORY#*/}'
outputs:
  activate-path:
    description: Path to the Python venv activate script
    value: ${{ steps.install-buildstream.outputs.activate-path }}
  caches-path:
    description: Path to the cache folder that BuildStream uses to cache artifacts
    value: ${{ inputs.caches-path }}
  sources-path:
    description: Path to the cache folder that BuildStream uses to cache sources
    value: ${{ inputs.sources-path }}
  logs-path:
    description: Path to the log folder that BuildStream uses to store logs
    value: ${{ inputs.logs-path }}
  local-cache-server-port:
    description: Port of the local cache server
    value: ${{ inputs.local-cache-server-port }}
  local-cache-server-url:
    description: Url of the local cache server
    value: http://127.0.0.1:${{ inputs.local-cache-server-port }}
runs:
  using: composite
  steps:
    - name: Check Runner Operating System
      if: runner.os != 'Linux'
      shell: bash
      run: |
        : Check Runner Operating System
        echo "::notice::setup-buildstream action requires a Ubuntu runner."
        exit 2

    - name: Check Runner Architecture
      if: runner.arch != 'x64'
      shell: bash
      run: |
        : Check Runner Architecture
        echo "::notice::setup-buildstream action requires a x86_64 runner."
        exit 2

    - name: Check Action Inputs
      shell: bash
      run: |
        : Check Action Inputs

        echo ::group::Check add-local-cache-server-config
        case "${{ inputs.add-local-cache-server-config }}" in
          none);;
          artifacts);;
          sources);;
          both);;
          *)
            echo "::error::add-local-cache-server-config is incorrect"
            exit 2
            ;;
        esac
        echo ::endgroup::

        echo ::group::Check local-cache-server-push
        case "${{ inputs.local-cache-server-push }}" in
          none);;
          artifacts);;
          sources);;
          both);;
          *)
            echo "::error::local-cache-server-push is incorrect"
            exit 2
            ;;
        esac
        echo ::endgroup::

    - name: Install buildbox-integration
      env:
          DOWNLOAD_URL: https://gitlab.com/api/v4/projects/8347934/packages/generic/releases/1.1.0/buildbox-1.1.0-x86_64-linux-gnu.tgz
          DOWNLOAD_SHA256: e2e63112290b5bd6a64ccf26e40a53b73badb7b88dd98b20fca48a8050f93361
      shell: bash
      run: |
        : Install buildbox-integration

        echo ::group::Install dependencies
        sudo apt-get install bubblewrap fuse3 arch-test
        echo ::endgroup

        echo ::group::Create download directory
        DOWNLOAD_DIR=$(mktemp -d)
        echo ::endgroup::

        echo ::group::Download tarball
        DOWNLOAD_FILE="${DOWNLOAD_DIR}/$(basename ${DOWNLOAD_URL})"

        curl ${DOWNLOAD_URL} --location --output ${DOWNLOAD_FILE}
        echo ::endgroup::

        echo ::group::Check sha256sum
        echo "${DOWNLOAD_SHA256} ${DOWNLOAD_FILE}" | sha256sum --check --status
        echo ::endgroup::

        echo ::group::Extract to ~/.local/bin
        mkdir ~/.local/bin
        tar -zxvf ${DOWNLOAD_FILE} -C ~/.local/bin
        echo ::endgroup::

        echo ::group::Cleanup download directory
        rm -rf DOWNLOAD_DIR
        echo ::endgroup::

    - name: Install BuildStream
      id: install-buildstream
      env:
        ACTIVATE_PATH: ${{ inputs.venv-path }}/bin/activate
      shell: bash
      run: |
        : Install BuildStream
        echo ::group::Create and activate Python venv
        python -m venv ${{ inputs.venv-path }}
        echo "activate-path=${ACTIVATE_PATH}" >> $GITHUB_OUTPUT
        source ${ACTIVATE_PATH}
        echo ::endgroup::

        echo ::group::Install BuildStream
        sudo apt-get install lzip
        pip install -U BuildStream
        echo ::endgroup::

    - name: Install BuildStream plugins dependencies
      shell: bash
      run: |
        : Install BuildStream plugins dependencies
        echo ::group::Activate Python venv
        source ${{ steps.install-buildstream.outputs.activate-path }}
        echo ::endgroup::

        echo ::group::Install plugins dependencies
        pip install -U dulwich>=0.21.7 requests packaging tomli
        echo ::endgroup::

    - name: Set Up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Setup BuildStream config file
      shell: bash
      run: |
        : Setup BuildStream config file

        echo ::group::Generate config file
        cat <<EOF > ~/.config/buildstream.conf
        sourcedir: ${{ inputs.sources-path }}
        cachedir: ${{ inputs.caches-path }}
        logdir: ${{ inputs.logs-path }}
        EOF

        {
          if [[ "${{ inputs.add-local-cache-server-config }}" != "none" ]]; then

            echo "projects:"
            echo "  ${{ inputs.buildstream-project-name }}:"

            if [[ "${{ inputs.add-local-cache-server-config }}" == "artifacts" ]] || [[ "${{ inputs.add-local-cache-server-config }}" == "both" ]]; then
              echo "    artifacts:"
              echo "      servers:"
              echo "      - url: http://127.0.0.1:${{ inputs.local-cache-server-port }}"
              echo "        push: ${{ (inputs.local-cache-server-push == 'artifacts') || (inputs.local-cache-server-push == 'both') }}"
            fi

            if [[ "${{ inputs.add-local-cache-server-config }}" == "sources" ]] || [[ "${{ inputs.add-local-cache-server-config }}" == "both" ]]; then
              echo "    source-caches:"
              echo "      servers:"
              echo "      - url: http://127.0.0.1:${{ inputs.local-cache-server-port }}"
              echo "        push: ${{ (inputs.local-cache-server-push == 'sources') || (inputs.local-cache-server-push == 'both') }}"
            fi
          fi
        } >> ~/.config/buildstream.conf
        echo ::endgroup::

        echo ::group::Print generated config file
        cat ~/.config/buildstream.conf
        echo ::endgroup::
